{
  "version": 3,
  "sources": ["../../../../src/utils/index.ts", "../../../../src/validators/template/index.ts", "../../../../src/actions/template/setElementAttributes.ts"],
  "sourcesContent": ["export const escapeTemplateString = (templateString: string): string => {\n  if (typeof templateString !== \"string\") return templateString;\n  return templateString\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\")\n    .replace(/\\//g, \"&#x2F;\");\n};\n\nexport const bindStyleScope = (scopeId: string, strings: string): string => {\n  const regex = /(\\.(\\w+)(\\-*|\\_*)?)+\\w+/gi;\n  return strings.replace(regex, (values) => {\n    return `.${scopeId}-${values.replace(/\\./, \"\")}`;\n  });\n};\n\nexport const createUUID = () => Math.random().toString(36).slice(2, 6);\n\nexport const HTMLEvents = [\n  // Eventos de Mouse\n  \"onclick\",\n  \"ondblclick\",\n  \"onmousedown\",\n  \"onmouseup\",\n  \"onmouseover\",\n  \"onmouseout\",\n  \"onmousemove\",\n  \"onmouseenter\",\n  \"onmouseleave\",\n  \"oncontextmenu\",\n\n  // Eventos de Teclado\n  \"onkeydown\",\n  \"onkeyup\",\n  \"onkeypress\",\n\n  // Eventos de Foco\n  \"onfocus\",\n  \"onblur\",\n\n  // Eventos de Formul\u00E1rio\n  \"onsubmit\",\n  \"onchange\",\n  \"oninput\",\n  \"onreset\",\n  \"oninvalid\",\n\n  // Eventos de M\u00EDdia\n  \"onplay\",\n  \"onpause\",\n  \"onended\",\n  \"onvolumechange\",\n\n  // Eventos de Toque (Touch) - para dispositivos m\u00F3veis\n  \"ontouchstart\",\n  \"ontouchmove\",\n  \"ontouchend\",\n  \"ontouchcancel\",\n\n  // Eventos de Anima\u00E7\u00E3o e Transi\u00E7\u00E3o\n  \"onanimationstart\",\n  \"onanimationend\",\n  \"onanimationiteration\",\n  \"ontransitionend\",\n\n  // Eventos de Outros Interativos\n  \"onload\",\n  \"onerror\",\n  \"onresize\",\n  \"onscroll\",\n];\n", "import { HTMLEvents } from \"@/utils\";\n\nconst isObject =\n  <T>(payload: T) =>\n    () => {\n      return !!payload && !Array.isArray(payload) && typeof payload === \"object\";\n    };\n\nconst isArray =\n  <T>(payload: T) =>\n    () => {\n      return !!payload && Array.isArray(payload);\n    };\n\nconst isFunction =\n  <T = void>(payload: T) =>\n    () => {\n      return !!payload && typeof payload === \"function\";\n    };\n\nconst isString =\n  <T = void>(payload: T) =>\n    () => {\n      return typeof payload === \"string\";\n    };\n\nconst isEventName =\n  <T = void>(payload: T) =>\n    () => {\n      if (typeof payload !== \"string\") return false;\n      return HTMLEvents.includes(payload.toLowerCase());\n    };\n\nconst isTemplateData =\n  <T = void>(payload: T) =>\n    () => {\n      return typeof payload === \"string\" || typeof payload === \"number\";\n    };\n\nexport { isObject, isArray, isFunction, isString, isEventName, isTemplateData };\n", "import { isEventName } from \"@/validators\";\n\ntype Attribute = object & {\n  [key: symbol | string]: unknown;\n};\n\ntype EventHandler = <K extends keyof HTMLElementEventMap>(\n  event: HTMLElementEventMap[K],\n) => void;\n\nexport const setElementAttributes = (\n  element: Element,\n  attributes: Attribute,\n): Element => {\n  const attributeKeys = attributes ? Object.keys(attributes) : [];\n  for (const key of attributeKeys) {\n    if (!isEventName(key)()) {\n      element.setAttribute(key, attributes[key] as string);\n    } else {\n      const eventName = key\n        .replace(/on/, \"\")\n        .toLowerCase() as keyof HTMLElementEventMap;\n      const eventHandler = attributes[key] as EventHandler;\n      element.addEventListener(eventName, eventHandler);\n    }\n  }\n  return element;\n};\n"],
  "mappings": "+EAoBO,IAAMA,EAAa,CAExB,UACA,aACA,cACA,YACA,cACA,aACA,cACA,eACA,eACA,gBAGA,YACA,UACA,aAGA,UACA,SAGA,WACA,WACA,UACA,UACA,YAGA,SACA,UACA,UACA,iBAGA,eACA,cACA,aACA,gBAGA,mBACA,iBACA,uBACA,kBAGA,SACA,UACA,WACA,UACF,EC9CA,IAAMC,EACJC,EAAWC,GACT,IACM,OAAOA,GAAY,SAAiB,GACjCC,EAAW,SAASD,EAAQ,YAAY,CAAC,EAHpD,eCjBK,IAAME,EAAuBC,EAAA,CAClCC,EACAC,IACY,CACZ,IAAMC,EAAgBD,EAAa,OAAO,KAAKA,CAAU,EAAI,CAAC,EAC9D,QAAWE,KAAOD,EAChB,GAAI,CAACE,EAAYD,CAAG,EAAE,EACpBH,EAAQ,aAAaG,EAAKF,EAAWE,CAAG,CAAW,MAC9C,CACL,IAAME,EAAYF,EACf,QAAQ,KAAM,EAAE,EAChB,YAAY,EACTG,EAAeL,EAAWE,CAAG,EACnCH,EAAQ,iBAAiBK,EAAWC,CAAY,CAClD,CAEF,OAAON,CACT,EAjBoC",
  "names": ["HTMLEvents", "isEventName", "__name", "payload", "HTMLEvents", "setElementAttributes", "__name", "element", "attributes", "attributeKeys", "key", "isEventName", "eventName", "eventHandler"]
}
