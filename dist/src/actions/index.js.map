{
  "version": 3,
  "sources": ["../../../src/factories/createChain/index.ts", "../../../src/utils/index.ts", "../../../src/validators/template/index.ts", "../../../src/actions/template/renderTemplateObject.ts", "../../../src/render/index.ts", "../../../src/actions/template/renderTemplateArray.ts", "../../../src/actions/template/renderChildren.ts", "../../../src/state/createState.ts", "../../../src/actions/template/createElementByFactoryName.ts", "../../../src/actions/template/setElementAttributes.ts", "../../../src/actions/template/createElementByTagName.ts"],
  "sourcesContent": ["import type { ChainLink } from \"./types\";\n\nexport const createChain = () => {\n  const _chain = new Set<ChainLink<unknown>>();\n\n  const add = <T>(chainLink: ChainLink<T>) => {\n    _chain.add(chainLink);\n  };\n\n  const execute = () => {\n    for (const { action, validator } of _chain) {\n      if (validator()) action();\n    }\n  };\n\n  return { add, execute };\n};\n", "export const escapeTemplateString = (templateString: string): string => {\n  if (typeof templateString !== \"string\") return templateString;\n  return templateString\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\")\n    .replace(/\\//g, \"&#x2F;\");\n};\n\nexport const bindStyleScope = (scopeId: string, strings: string): string => {\n  const regex = /(\\.(\\w+)(\\-*|\\_*)?)+\\w+/gi;\n  return strings.replace(regex, (values) => {\n    return `.${scopeId}-${values.replace(/\\./, \"\")}`;\n  });\n};\n\nexport const createUUID = () => Math.random().toString(36).slice(2, 6);\n\nexport const HTMLEvents = [\n  // Eventos de Mouse\n  \"onclick\",\n  \"ondblclick\",\n  \"onmousedown\",\n  \"onmouseup\",\n  \"onmouseover\",\n  \"onmouseout\",\n  \"onmousemove\",\n  \"onmouseenter\",\n  \"onmouseleave\",\n  \"oncontextmenu\",\n\n  // Eventos de Teclado\n  \"onkeydown\",\n  \"onkeyup\",\n  \"onkeypress\",\n\n  // Eventos de Foco\n  \"onfocus\",\n  \"onblur\",\n\n  // Eventos de Formul\u00E1rio\n  \"onsubmit\",\n  \"onchange\",\n  \"oninput\",\n  \"onreset\",\n  \"oninvalid\",\n\n  // Eventos de M\u00EDdia\n  \"onplay\",\n  \"onpause\",\n  \"onended\",\n  \"onvolumechange\",\n\n  // Eventos de Toque (Touch) - para dispositivos m\u00F3veis\n  \"ontouchstart\",\n  \"ontouchmove\",\n  \"ontouchend\",\n  \"ontouchcancel\",\n\n  // Eventos de Anima\u00E7\u00E3o e Transi\u00E7\u00E3o\n  \"onanimationstart\",\n  \"onanimationend\",\n  \"onanimationiteration\",\n  \"ontransitionend\",\n\n  // Eventos de Outros Interativos\n  \"onload\",\n  \"onerror\",\n  \"onresize\",\n  \"onscroll\",\n];\n", "import { HTMLEvents } from \"@/utils\";\n\nconst isObject =\n  <T>(payload: T) =>\n    () => {\n      return !!payload && !Array.isArray(payload) && typeof payload === \"object\";\n    };\n\nconst isArray =\n  <T>(payload: T) =>\n    () => {\n      return !!payload && Array.isArray(payload);\n    };\n\nconst isFunction =\n  <T = void>(payload: T) =>\n    () => {\n      return !!payload && typeof payload === \"function\";\n    };\n\nconst isString =\n  <T = void>(payload: T) =>\n    () => {\n      return typeof payload === \"string\";\n    };\n\nconst isEventName =\n  <T = void>(payload: T) =>\n    () => {\n      if (typeof payload !== \"string\") return false;\n      return HTMLEvents.includes(payload.toLowerCase());\n    };\n\nexport { isObject, isArray, isFunction, isString, isEventName };\n", "import type { TemplateSchema } from \"@/types\";\nimport { createChain } from \"@/factories\";\nimport {\n  createElementByFactoryName,\n  createElementByTagName,\n  renderChildren,\n  setElementAttributes,\n} from \"@/actions\";\nimport { isFunction, isString } from \"@/validators\";\nimport type { State } from \"@/state\";\n\ntype Factory = (params?: unknown) => unknown;\n\nexport const renderTemplateObject =\n  (template: TemplateSchema, contextElement: Element, state: State = {}) =>\n    (): void => {\n      const _chain = createChain();\n\n      _chain.add({\n        validator: isString(template.type),\n        action: createElementByTagName(template, contextElement, state),\n      });\n\n      _chain.add({\n        validator: isFunction(template.type),\n        action: createElementByFactoryName(template, contextElement, state),\n      });\n\n      _chain.execute();\n    };\n", "import type { Template, TemplateSchema } from \"@/template\";\nimport { renderTemplateArray, renderTemplateObject } from \"@/actions\";\nimport { isArray, isObject, isFunction } from \"@/validators\";\n\ntype ContextElement = Element;\nimport { createChain } from \"@/factories\";\nimport { createState, type State } from \"@/state\";\n\n//const globalState = createState({});\n\nexport const render = (\n  template: Template,\n  context: ContextElement = document.body,\n  state: State = {},\n): ContextElement => {\n  const chain = createChain();\n  const componentElement = context || document.querySelector(\"body\");\n\n  chain.add({\n    validator: isArray(template),\n    action: renderTemplateArray(\n      template as TemplateSchema[],\n      componentElement,\n      state,\n    ),\n  });\n\n  chain.add({\n    validator: isObject(template),\n    action: renderTemplateObject(\n      template as TemplateSchema,\n      componentElement,\n      state,\n    ),\n  });\n\n  chain.execute();\n  return componentElement;\n};\n", "import { render } from \"@/render\";\nimport type { TemplateSchema } from \"@/types\";\nimport type { State } from \"@/state\";\n\nexport const renderTemplateArray =\n  (\n    templateSchema: TemplateSchema[],\n    contextElement: Element,\n    state: State = {},\n  ) =>\n    () => {\n      for (const template of templateSchema) {\n        render(template, contextElement, state);\n      }\n    };\n", "import { render } from \"@/render\";\nimport type { Template, TemplateSchema } from \"@/template\";\nimport type { State } from \"@/state\";\n\nexport const renderChildren = (\n  children: TemplateSchema[],\n  element: Element,\n  state: State = {},\n) => {\n  for (const child of children) {\n    if (typeof child === \"string\") {\n      element.innerHTML = child;\n      //console.log(children, state);\n    } else render(child, element, state);\n  }\n};\n", "import type { StateHandler, State, StateManager } from \"./types\";\n\nconst _createUUID = (): string => Math.random().toString(36).substring(2, 11);\n\nexport const createState = <S>(initialState: State<S>): StateManager<S> => {\n  const _state = JSON.parse(JSON.stringify(initialState));\n  const _handlers = new Set<StateHandler>();\n  const _id: Readonly<string> = _createUUID();\n\n  const _notifyHandlers = (payload: State<S>) => {\n    for (const stateHandler of _handlers) {\n      stateHandler<S>(payload);\n    }\n  };\n\n  const set = (payload: State<S>) => {\n    Object.assign(_state, JSON.parse(JSON.stringify(payload)));\n    _notifyHandlers(JSON.parse(JSON.stringify(_state)));\n  };\n\n  const get = (): State<S> => {\n    return JSON.parse(JSON.stringify(_state));\n  };\n\n  const watch = (callback: StateHandler) => {\n    _handlers.add(callback);\n  };\n\n  return { set, get, watch };\n};\n", "import { render } from \"@/render\";\nimport type { Template, TemplateSchema } from \"@/template\";\nimport {\n  type State,\n  type StateCreator,\n  type StateHandler,\n  type StateManager,\n  createState,\n} from \"@/state\";\nimport { renderChildren } from \"./renderChildren\";\n\ntype Factory = (params?: unknown) => unknown;\n\ntype StyleParams = {\n  props: State;\n  state: State;\n};\n\ntype CssHandler = (params: StyleParams) => void;\n\nconst _createTagByFactoryName = (factory: Factory) => {\n  return factory.name\n    .split(/(?=[A-Z])/)\n    .join(\"-\")\n    .toLowerCase();\n};\n\nconst _mergeState = (state: StateManager) => {\n  const mergeState = <T>(initialState: State<T>): StateManager => {\n    const latestState = state.get() as State<T>;\n    state.set({ ...initialState, ...latestState });\n\n    return { get: state.get, set: state.set, watch: state.watch };\n  };\n  return mergeState;\n};\n\nconst _createStyles = ({ props, state }: StyleParams) => {\n  return (cssHandler: CssHandler) => {\n    return cssHandler({ props, state });\n  };\n};\n\nexport const createElementByFactoryName = (\n  template: TemplateSchema,\n  parentElement: Element,\n  latestState: State = {},\n) => {\n  return () => {\n    const factory = template.type as Factory;\n    const tagName = _createTagByFactoryName(factory);\n    const element = document.createElement(tagName);\n    const props = template.props;\n\n    const currentState = JSON.parse(JSON.stringify(latestState));\n    const state = createState(currentState);\n    const useState = _mergeState(state);\n    const useStyles = _createStyles({ props, state });\n\n    const children = factory({\n      props,\n      useState,\n      useStyles,\n    }) as TemplateSchema[];\n\n    parentElement.insertAdjacentElement(\"beforeend\", element);\n    renderChildren(children, element, currentState);\n\n    state.watch((payload) => {\n      element.innerHTML = \"\";\n      render(template, element, payload);\n    });\n  };\n};\n", "import { isEventName } from \"@/validators\";\n\ntype Attribute = object & {\n  [key: symbol | string]: unknown;\n};\n\ntype EventHandler = <K extends keyof HTMLElementEventMap>(\n  event: HTMLElementEventMap[K],\n) => void;\n\nexport const setElementAttributes = (\n  element: Element,\n  attributes: Attribute,\n): Element => {\n  const attributeKeys = attributes ? Object.keys(attributes) : [];\n  for (const key of attributeKeys) {\n    if (!isEventName(key)()) {\n      element.setAttribute(key, attributes[key] as string);\n    } else {\n      const eventName = key\n        .replace(/on/, \"\")\n        .toLowerCase() as keyof HTMLElementEventMap;\n      const eventHandler = attributes[key] as EventHandler;\n      element.addEventListener(eventName, eventHandler);\n    }\n  }\n  return element;\n};\n", "import type { State } from \"@/state\";\nimport type { TemplateSchema } from \"@/template\";\nimport { setElementAttributes } from \"./setElementAttributes\";\nimport { renderChildren } from \"./renderChildren\";\n\nexport const createElementByTagName =\n  (template: TemplateSchema, parentElement: Element, state: State = {}) =>\n    () => {\n      const tagName = template.type as string;\n      const element = document.createElement(tagName);\n      setElementAttributes(element, template.props);\n\n      parentElement.insertAdjacentElement(\"beforeend\", element);\n      renderChildren(template.children, element, state);\n    };\n"],
  "mappings": "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",
  "names": ["createChain", "__name", "_chain", "chainLink", "action", "validator", "HTMLEvents", "isObject", "__name", "payload", "isArray", "isFunction", "isString", "isEventName", "HTMLEvents", "renderTemplateObject", "__name", "template", "contextElement", "state", "_chain", "createChain", "isString", "createElementByTagName", "isFunction", "createElementByFactoryName", "render", "__name", "template", "context", "state", "chain", "createChain", "componentElement", "isArray", "renderTemplateArray", "isObject", "renderTemplateObject", "renderTemplateArray", "__name", "templateSchema", "contextElement", "state", "template", "render", "renderChildren", "__name", "children", "element", "state", "child", "render", "_createUUID", "__name", "createState", "initialState", "_state", "_handlers", "_id", "_notifyHandlers", "payload", "stateHandler", "callback", "_createTagByFactoryName", "__name", "factory", "_mergeState", "state", "initialState", "latestState", "_createStyles", "props", "cssHandler", "createElementByFactoryName", "template", "parentElement", "tagName", "element", "currentState", "createState", "useState", "useStyles", "children", "renderChildren", "payload", "render", "setElementAttributes", "__name", "element", "attributes", "attributeKeys", "key", "isEventName", "eventName", "eventHandler", "createElementByTagName", "__name", "template", "parentElement", "state", "tagName", "element", "setElementAttributes", "renderChildren"]
}
