{
  "version": 3,
  "sources": ["../../../src/style/createHash.ts", "../../../src/style/cssParser.ts", "../../../src/style/createStyleElement.ts", "../../../src/style/css.ts"],
  "sourcesContent": ["/**\n * Gera um hash \u00FAnico baseado no algoritmo DJB2.\n * @param str - O conte\u00FAdo a partir do qual o hash ser\u00E1 gerado.\n * @returns O hash gerado como uma string.\n */\nexport const createHash = (str: string): string => {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return `css-${(hash >>> 0).toString(36)}`;\n};\n", "export const createScopeStyle = (str: string): string => {\n  const hashResult = [...str].reduce(\n    (hash, char) => (hash * 33) ^ char.charCodeAt(0),\n    5381,\n  );\n  return `css-${(hashResult >>> 0).toString(36)}`;\n};\n\n// Fun\u00E7\u00E3o que processa CSS aplicando escopo\nconst processCSS = (css: string, className: string): string => {\n  const substituteScope = (inputCss: string): string =>\n    inputCss.replace(/&/g, `.${className}`);\n\n  const wrapLooseRules = (scopedCss: string): string =>\n    scopedCss.replace(\n      /(?:^|\\})([^{]+;)/g,\n      (_, decl) => `.${className} {${decl.trim()}}`,\n    );\n\n  const scopeSelectors = (wrappedCss: string): string =>\n    wrappedCss.replace(/([^{]+\\{)/g, (match, selectorBlock) => {\n      if (selectorBlock.includes(\"@\")) return match; // Manter media queries intactas\n      const scopedSelector = selectorBlock.includes(className)\n        ? selectorBlock\n        : `.${className} ${selectorBlock.trim()}`;\n      return `${scopedSelector} `;\n    });\n\n  return scopeSelectors(wrapLooseRules(substituteScope(css)));\n};\n\nexport const transpile = (css: string, className: string): string => {\n  const mediaQueryRegex = /(@media[^{]+\\{)([\\s\\S]+?})\\s*}/g;\n  const keyframeRegex = /(@keyframes[^{]+\\{(?:[^{}]*\\{[^{}]*\\}\\s*)*?\\})/g;\n\n  const extractKeyframes = (inputCss: string): [string, string[]] => {\n    const keyframes: string[] = [];\n    const newCss = inputCss.replace(keyframeRegex, (match) => {\n      keyframes.push(match);\n      return \"\";\n    });\n    return [newCss, keyframes];\n  };\n\n  const [cssWithoutKeyframes, keyframes] = extractKeyframes(css);\n\n  const processMediaQueries = (inputCss: string): [string, string[]] => {\n    const queries: string[] = [];\n    const remainingCss = inputCss.replace(mediaQueryRegex, (_, p1, p2) => {\n      const scopedContent = processCSS(p2.trim(), className);\n      queries.push(`${p1}\\n  ${scopedContent}\\n}`);\n      return \"\";\n    });\n    return [remainingCss, queries];\n  };\n\n  const [cssWithoutMediaQueries, mediaQueries] =\n    processMediaQueries(cssWithoutKeyframes);\n\n  const processedCss = processCSS(cssWithoutMediaQueries.trim(), className);\n\n  const finalCss = [processedCss, ...mediaQueries, ...keyframes]\n    .filter(Boolean)\n    .join(\"\\n\");\n\n  return finalCss;\n};\n", "const styleElementCache: Map<string, HTMLStyleElement> = new Map();\n\nexport const createStyleElement = (componentId: string): HTMLStyleElement => {\n  const styleElement = styleElementCache.get(componentId);\n\n  if (styleElement !== undefined) {\n    return styleElement;\n  }\n\n  const style = document.createElement(\"style\");\n  style.setAttribute(\"data-component\", componentId);\n  document.head.appendChild(style);\n  styleElementCache.set(componentId, style);\n\n  return style;\n};\n", "import type { TaggedStyle } from \"./types\";\nimport { createHash } from \"./createHash\";\nimport { transpile } from \"./cssParser\";\nimport { createStyleElement } from \"./createStyleElement\";\n\nconst cssCache: Map<string, string> = new Map();\n\nexport const css: TaggedStyle = (\n  strings: TemplateStringsArray,\n  ...interpolations: (string | number)[]\n): string => {\n  const rawCSS = strings.reduce(\n    (accumulator, str, index) =>\n      `${accumulator}${str}${interpolations[index] !== undefined ? interpolations[index] : \"\"}`,\n    \"\",\n  );\n\n  const cachedClassName = cssCache.get(rawCSS);\n  if (cachedClassName !== undefined) {\n    return cachedClassName;\n  }\n\n  const classNameHash = createHash(rawCSS);\n  const scopedStyle = transpile(rawCSS, classNameHash);\n  const styleElement = createStyleElement(`component-${classNameHash}`);\n\n  if (!styleElement.innerHTML.includes(scopedStyle)) {\n    styleElement.innerHTML += scopedStyle;\n  }\n\n  cssCache.set(rawCSS, classNameHash);\n\n  return classNameHash;\n};\n"],
  "mappings": "+EAKO,IAAMA,EAAaC,EAACC,GAAwB,CACjD,IAAIC,EAAO,KACX,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAC9BD,EAAQA,EAAO,GAAMD,EAAI,WAAWE,CAAC,EAEvC,MAAO,QAAQD,IAAS,GAAG,SAAS,EAAE,CAAC,EACzC,EAN0B,cCI1B,IAAME,EAAaC,EAAA,CAACC,EAAaC,IAURF,EAACG,GACtBA,EAAW,QAAQ,aAAc,CAACC,EAAOC,IACnCA,EAAc,SAAS,GAAG,EAAUD,EAIjC,GAHgBC,EAAc,SAASH,CAAS,EACnDG,EACA,IAAIH,CAAS,IAAIG,EAAc,KAAK,CAAC,EACjB,GACzB,EAPoB,kBANAL,EAACM,GACtBA,EAAU,QACR,oBACA,CAACC,EAAGC,IAAS,IAAIN,CAAS,KAAKM,EAAK,KAAK,CAAC,GAC5C,EAJqB,kBAHCR,EAACS,GACvBA,EAAS,QAAQ,KAAM,IAAIP,CAAS,EAAE,EADhB,mBAkB6BD,CAAG,CAAC,CAAC,EAnBzC,cAsBNS,EAAYV,EAAA,CAACC,EAAaC,IAA8B,CACnE,IAAMS,EAAkB,kCAClBC,EAAgB,kDAEhBC,EAAmBb,EAACS,GAAyC,CACjE,IAAMK,EAAsB,CAAC,EAK7B,MAAO,CAJQL,EAAS,QAAQG,EAAgBR,IAC9CU,EAAU,KAAKV,CAAK,EACb,GACR,EACeU,CAAS,CAC3B,EAPyB,oBASnB,CAACC,EAAqBD,CAAS,EAAID,EAAiBZ,CAAG,EAEvDe,EAAsBhB,EAACS,GAAyC,CACpE,IAAMQ,EAAoB,CAAC,EAM3B,MAAO,CALcR,EAAS,QAAQE,EAAiB,CAACJ,EAAGW,EAAIC,IAAO,CACpE,IAAMC,EAAgBrB,EAAWoB,EAAG,KAAK,EAAGjB,CAAS,EACrD,OAAAe,EAAQ,KAAK,GAAGC,CAAE;AAAA,IAAOE,CAAa;AAAA,EAAK,EACpC,EACT,CAAC,EACqBH,CAAO,CAC/B,EAR4B,uBAUtB,CAACI,EAAwBC,CAAY,EACzCN,EAAoBD,CAAmB,EAQzC,MAJiB,CAFIhB,EAAWsB,EAAuB,KAAK,EAAGnB,CAAS,EAExC,GAAGoB,EAAc,GAAGR,CAAS,EAC1D,OAAO,OAAO,EACd,KAAK;AAAA,CAAI,CAGd,EAnCyB,aC/BzB,IAAMS,EAAmD,IAAI,IAEhDC,EAAqBC,EAACC,GAA0C,CAC3E,IAAMC,EAAeJ,EAAkB,IAAIG,CAAW,EAEtD,GAAIC,IAAiB,OACnB,OAAOA,EAGT,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5C,OAAAA,EAAM,aAAa,iBAAkBF,CAAW,EAChD,SAAS,KAAK,YAAYE,CAAK,EAC/BL,EAAkB,IAAIG,EAAaE,CAAK,EAEjCA,CACT,EAbkC,sBCGlC,IAAMC,EAAgC,IAAI,IAE7BC,EAAmBC,EAAA,CAC9BC,KACGC,IACQ,CACX,IAAMC,EAASF,EAAQ,OACrB,CAACG,EAAaC,EAAKC,IACjB,GAAGF,CAAW,GAAGC,CAAG,GAAGH,EAAeI,CAAK,IAAM,OAAYJ,EAAeI,CAAK,EAAI,EAAE,GACzF,EACF,EAEMC,EAAkBT,EAAS,IAAIK,CAAM,EAC3C,GAAII,IAAoB,OACtB,OAAOA,EAGT,IAAMC,EAAgBC,EAAWN,CAAM,EACjCO,EAAcC,EAAUR,EAAQK,CAAa,EAC7CI,EAAeC,EAAmB,aAAaL,CAAa,EAAE,EAEpE,OAAKI,EAAa,UAAU,SAASF,CAAW,IAC9CE,EAAa,WAAaF,GAG5BZ,EAAS,IAAIK,EAAQK,CAAa,EAE3BA,CACT,EA1BgC",
  "names": ["createHash", "__name", "str", "hash", "i", "processCSS", "__name", "css", "className", "wrappedCss", "match", "selectorBlock", "scopedCss", "_", "decl", "inputCss", "transpile", "mediaQueryRegex", "keyframeRegex", "extractKeyframes", "keyframes", "cssWithoutKeyframes", "processMediaQueries", "queries", "p1", "p2", "scopedContent", "cssWithoutMediaQueries", "mediaQueries", "styleElementCache", "createStyleElement", "__name", "componentId", "styleElement", "style", "cssCache", "css", "__name", "strings", "interpolations", "rawCSS", "accumulator", "str", "index", "cachedClassName", "classNameHash", "createHash", "scopedStyle", "transpile", "styleElement", "createStyleElement"]
}
