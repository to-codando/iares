{
  "version": 3,
  "sources": ["../../../src/style/createHash.ts", "../../../src/style/createStyleElement.ts", "../../../src/style/createStyleScope.ts", "../../../src/style/css.ts"],
  "sourcesContent": ["export const createHash = (str: string): string => {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return `css-${(hash >>> 0).toString(36)}`;\n};\n", "const styleElementCache: Map<string, HTMLStyleElement> = new Map();\n\nexport const createStyleElement = (componentId: string): HTMLStyleElement => {\n  const styleElement = styleElementCache.get(componentId);\n\n  if (styleElement !== undefined) {\n    return styleElement;\n  }\n\n  const style = document.createElement(\"style\");\n  style.setAttribute(\"data-component\", componentId);\n  document.head.appendChild(style);\n  styleElementCache.set(componentId, style);\n\n  return style;\n};\n", "const splitIntoRules = (css: string): string[] => {\n  return css\n    .split(\"}\")\n    .map((rule) => rule.trim())\n    .filter((rule) => rule.length > 0);\n};\n\nconst parseRule = (rule: string): [string[], string] => {\n  const [selectorPart, declarationPart] = rule\n    .split(\"{\")\n    .map((part) => part.trim());\n  const selectors = selectorPart.split(\",\").map((selector) => selector.trim());\n  const declarations = declarationPart.trim();\n  return [selectors, declarations];\n};\n\nconst prefixSelector = (selector: string, className: string): string => {\n  if (selector.startsWith(\"&\")) {\n    return selector.replace(\"&\", `.${className}`);\n  }\n  return `.${className} ${selector}`;\n};\n\nconst scopeRule = (rule: string, className: string): string => {\n  const [selectors, declarations] = parseRule(rule);\n  const scopedSelectors = selectors.map((selector) =>\n    prefixSelector(selector, className),\n  );\n  return `${scopedSelectors.join(\", \")} { ${declarations} }\\n`;\n};\n\nexport const createStyleScope = (className: string, css: string): string => {\n  return splitIntoRules(css)\n    .map((rule) => scopeRule(rule, className))\n    .reduce((acc, scopedRule) => acc + scopedRule, \"\");\n};\n", "// css.ts\n\nimport { createHash } from \"./createHash\";\nimport { createStyleScope } from \"./createStyleScope\";\nimport { createStyleElement } from \"./createStyleElement\";\n\n/**\n * Cache para mapear o CSS bruto para nomes de classes geradas.\n */\nconst cssCache: Map<string, string> = new Map();\n\n/**\n * Cache para mapear nomes de classes para IDs de componentes.\n */\nconst classToComponentId: Map<string, string> = new Map();\n\n/**\n * Gera um identificador \u00FAnico para um componente.\n * @returns Identificador \u00FAnico.\n */\nconst generateComponentId = (): string => {\n  return `component-${Math.random().toString(36).substring(2, 8)}`;\n};\n\n/**\n * Template tag `css` para processar CSS com suporte a interpola\u00E7\u00E3o de vari\u00E1veis din\u00E2micas,\n * gerar classes \u00FAnicas, escopar estilos e injetar CSS de forma otimizada.\n *\n * @param strings Partes est\u00E1ticas da string.\n * @param interpolations Partes din\u00E2micas da string.\n * @returns Nome da classe gerada.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...interpolations: (string | number)[]\n): string => {\n  // Concatenar strings e interpolations para formar o CSS completo\n  const rawCSS = strings.reduce((accumulator, str, index) => {\n    return (\n      accumulator +\n      str +\n      (interpolations[index] !== undefined ? interpolations[index] : \"\")\n    );\n  }, \"\");\n\n  // Verifica se o CSS j\u00E1 foi processado\n  const cachedClassName = cssCache.get(rawCSS);\n  if (cachedClassName !== undefined) {\n    return cachedClassName;\n  }\n\n  // Gera um nome de classe \u00FAnico baseado no conte\u00FAdo do CSS\n  const className = createHash(rawCSS);\n\n  // Associa a classe a um componente\n  let componentId: string;\n  const existingComponentId = classToComponentId.get(className);\n  if (existingComponentId !== undefined) {\n    componentId = existingComponentId;\n  } else {\n    componentId = generateComponentId();\n    classToComponentId.set(className, componentId);\n  }\n\n  // Escopa o CSS para evitar conflitos de estilos\n  const scopedCSS = createStyleScope(className, rawCSS);\n\n  // Obt\u00E9m ou cria o elemento <style> correspondente ao componente\n  const styleElement = createStyleElement(componentId);\n\n  // Verifica se a regra CSS escopada j\u00E1 foi inserida no elemento <style>\n  if (!styleElement.innerHTML.includes(scopedCSS)) {\n    styleElement.innerHTML += scopedCSS;\n  }\n\n  // Armazena o mapeamento no cache para reutiliza\u00E7\u00E3o futura\n  cssCache.set(rawCSS, className);\n\n  return className;\n};\n"],
  "mappings": "+EAAO,IAAMA,EAAaC,EAACC,GAAwB,CACjD,IAAIC,EAAO,KACX,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAC9BD,EAAQA,EAAO,GAAMD,EAAI,WAAWE,CAAC,EAEvC,MAAO,QAAQD,IAAS,GAAG,SAAS,EAAE,CAAC,EACzC,EAN0B,cCA1B,IAAME,EAAmD,IAAI,IAEhDC,EAAqBC,EAACC,GAA0C,CAC3E,IAAMC,EAAeJ,EAAkB,IAAIG,CAAW,EAEtD,GAAIC,IAAiB,OACnB,OAAOA,EAGT,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5C,OAAAA,EAAM,aAAa,iBAAkBF,CAAW,EAChD,SAAS,KAAK,YAAYE,CAAK,EAC/BL,EAAkB,IAAIG,EAAaE,CAAK,EAEjCA,CACT,EAbkC,sBCFlC,IAAMC,EAAiBC,EAACC,GACfA,EACJ,MAAM,GAAG,EACT,IAAKC,GAASA,EAAK,KAAK,CAAC,EACzB,OAAQA,GAASA,EAAK,OAAS,CAAC,EAJd,kBAOjBC,EAAYH,EAACE,GAAqC,CACtD,GAAM,CAACE,EAAcC,CAAe,EAAIH,EACrC,MAAM,GAAG,EACT,IAAKI,GAASA,EAAK,KAAK,CAAC,EACtBC,EAAYH,EAAa,MAAM,GAAG,EAAE,IAAKI,GAAaA,EAAS,KAAK,CAAC,EACrEC,EAAeJ,EAAgB,KAAK,EAC1C,MAAO,CAACE,EAAWE,CAAY,CACjC,EAPkB,aASZC,EAAiBV,EAAA,CAACQ,EAAkBG,IACpCH,EAAS,WAAW,GAAG,EAClBA,EAAS,QAAQ,IAAK,IAAIG,CAAS,EAAE,EAEvC,IAAIA,CAAS,IAAIH,CAAQ,GAJX,kBAOjBI,EAAYZ,EAAA,CAACE,EAAcS,IAA8B,CAC7D,GAAM,CAACJ,EAAWE,CAAY,EAAIN,EAAUD,CAAI,EAIhD,MAAO,GAHiBK,EAAU,IAAKC,GACrCE,EAAeF,EAAUG,CAAS,CACpC,EAC0B,KAAK,IAAI,CAAC,MAAMF,CAAY;AAAA,CACxD,EANkB,aAQLI,EAAmBb,EAAA,CAACW,EAAmBV,IAC3CF,EAAeE,CAAG,EACtB,IAAKC,GAASU,EAAUV,EAAMS,CAAS,CAAC,EACxC,OAAO,CAACG,EAAKC,IAAeD,EAAMC,EAAY,EAAE,EAHrB,oBCtBhC,IAAMC,EAAgC,IAAI,IAKpCC,EAA0C,IAAI,IAM9CC,EAAsBC,EAAA,IACnB,aAAa,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,CAAC,GADpC,uBAYfC,EAAMD,EAAA,CACjBE,KACGC,IACQ,CAEX,IAAMC,EAASF,EAAQ,OAAO,CAACG,EAAaC,EAAKC,IAE7CF,EACAC,GACCH,EAAeI,CAAK,IAAM,OAAYJ,EAAeI,CAAK,EAAI,IAEhE,EAAE,EAGCC,EAAkBX,EAAS,IAAIO,CAAM,EAC3C,GAAII,IAAoB,OACtB,OAAOA,EAIT,IAAMC,EAAYC,EAAWN,CAAM,EAG/BO,EACEC,EAAsBd,EAAmB,IAAIW,CAAS,EACxDG,IAAwB,OAC1BD,EAAcC,GAEdD,EAAcZ,EAAoB,EAClCD,EAAmB,IAAIW,EAAWE,CAAW,GAI/C,IAAME,EAAYC,EAAiBL,EAAWL,CAAM,EAG9CW,EAAeC,EAAmBL,CAAW,EAGnD,OAAKI,EAAa,UAAU,SAASF,CAAS,IAC5CE,EAAa,WAAaF,GAI5BhB,EAAS,IAAIO,EAAQK,CAAS,EAEvBA,CACT,EA/CmB",
  "names": ["createHash", "__name", "str", "hash", "i", "styleElementCache", "createStyleElement", "__name", "componentId", "styleElement", "style", "splitIntoRules", "__name", "css", "rule", "parseRule", "selectorPart", "declarationPart", "part", "selectors", "selector", "declarations", "prefixSelector", "className", "scopeRule", "createStyleScope", "acc", "scopedRule", "cssCache", "classToComponentId", "generateComponentId", "__name", "css", "strings", "interpolations", "rawCSS", "accumulator", "str", "index", "cachedClassName", "className", "createHash", "componentId", "existingComponentId", "scopedCSS", "createStyleScope", "styleElement", "createStyleElement"]
}
