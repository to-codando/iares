{
  "version": 3,
  "sources": ["../../../src/style/createHash.ts", "../../../src/style/createStyleElement.ts", "../../../src/style/cssParser.ts", "../../../src/style/css.ts"],
  "sourcesContent": ["/**\n * Gera um hash \u00FAnico baseado no algoritmo DJB2.\n * @param str - O conte\u00FAdo a partir do qual o hash ser\u00E1 gerado.\n * @returns O hash gerado como uma string.\n */\nexport const createHash = (str: string): string => {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return `css-${(hash >>> 0).toString(36)}`;\n};\n", "const styleElementCache: Map<string, HTMLStyleElement> = new Map();\n\nexport const createStyleElement = (componentId: string): HTMLStyleElement => {\n  const styleElement = styleElementCache.get(componentId);\n\n  if (styleElement !== undefined) {\n    return styleElement;\n  }\n\n  const style = document.createElement(\"style\");\n  style.setAttribute(\"data-component\", componentId);\n  document.head.appendChild(style);\n  styleElementCache.set(componentId, style);\n\n  return style;\n};\n", "export const createScopeStyle = (str: string): string => {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return `css-${(hash >>> 0).toString(36)}`;\n};\n\n// Fun\u00E7\u00E3o que processa CSS aplicando escopo\nconst processCSS = (inputCss: string, className: string): string => {\n  let css = inputCss; // Cria uma c\u00F3pia para evitar reatribui\u00E7\u00E3o direta\n  css = css.replace(/&/g, `.${className}`);\n\n  // Envolve regras soltas dentro de um bloco da classe\n  const wrappedCSS = css.replace(/(?:^|\\})([^{]+;)/g, (match, decl) => {\n    return `.${className} {${decl.trim()}}`;\n  });\n\n  return wrappedCSS.replace(/([^{]+\\{)/g, (match, selectorBlock) => {\n    if (selectorBlock.includes(\"@\")) return match; // Mant\u00E9m media queries intactas\n    const scopedSelector = selectorBlock.includes(className)\n      ? selectorBlock\n      : `.${className} ${selectorBlock.trim()}`;\n    return `${scopedSelector} `;\n  });\n};\n\nexport const transpile = (css: string, className: string): string => {\n  const mediaQueryRegex = /(@media[^{]+\\{)([\\s\\S]+?})\\s*}/g;\n  let processedCSS = css;\n\n  const matchedQueries: string[] = [];\n  let matchArray: RegExpExecArray | null;\n\n  matchArray = mediaQueryRegex.exec(css);\n  while (matchArray !== null) {\n    if (matchArray) {\n      const mediaQueryContent = processCSS(matchArray[2].trim(), className);\n      matchedQueries.push(`${matchArray[1]}\\n  ${mediaQueryContent}\\n}`);\n      processedCSS = processedCSS.replace(matchArray[0], \"\");\n    }\n    matchArray = mediaQueryRegex.exec(css); // Move a pr\u00F3xima chamada do exec aqui\n  }\n\n  processedCSS = processCSS(processedCSS.trim(), className);\n\n  return `${processedCSS}\\n${matchedQueries.join(\"\\n\")}`.trim();\n};\n", "import type { TaggedStyle } from \"./types\";\nimport { createHash } from \"./createHash\";\nimport { transpile } from \"./cssParser\";\nimport { createStyleElement } from \"./createStyleElement\";\n\nconst cssCache: Map<string, string> = new Map();\n\nexport const css: TaggedStyle = (\n  strings: TemplateStringsArray,\n  ...interpolations: (string | number)[]\n): string => {\n  const rawCSS = strings.reduce(\n    (accumulator, str, index) =>\n      `${accumulator}${str}${interpolations[index] !== undefined ? interpolations[index] : \"\"}`,\n    \"\",\n  );\n\n  const cachedClassName = cssCache.get(rawCSS);\n  if (cachedClassName !== undefined) {\n    return cachedClassName;\n  }\n\n  const classNameHash = createHash(rawCSS);\n  const scopedStyle = transpile(rawCSS, classNameHash);\n  const styleElement = createStyleElement(`component-${classNameHash}`);\n\n  if (!styleElement.innerHTML.includes(scopedStyle)) {\n    styleElement.innerHTML += scopedStyle;\n  }\n\n  cssCache.set(rawCSS, classNameHash);\n\n  return classNameHash;\n};\n"],
  "mappings": "+EAKO,IAAMA,EAAaC,EAACC,GAAwB,CACjD,IAAIC,EAAO,KACX,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAC9BD,EAAQA,EAAO,GAAMD,EAAI,WAAWE,CAAC,EAEvC,MAAO,QAAQD,IAAS,GAAG,SAAS,EAAE,CAAC,EACzC,EAN0B,cCL1B,IAAME,EAAmD,IAAI,IAEhDC,EAAqBC,EAACC,GAA0C,CAC3E,IAAMC,EAAeJ,EAAkB,IAAIG,CAAW,EAEtD,GAAIC,IAAiB,OACnB,OAAOA,EAGT,IAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5C,OAAAA,EAAM,aAAa,iBAAkBF,CAAW,EAChD,SAAS,KAAK,YAAYE,CAAK,EAC/BL,EAAkB,IAAIG,EAAaE,CAAK,EAEjCA,CACT,EAbkC,sBCOlC,IAAMC,EAAaC,EAAA,CAACC,EAAkBC,IAA8B,CAClE,IAAIC,EAAMF,EACV,OAAAE,EAAMA,EAAI,QAAQ,KAAM,IAAID,CAAS,EAAE,EAGpBC,EAAI,QAAQ,oBAAqB,CAACC,EAAOC,IACnD,IAAIH,CAAS,KAAKG,EAAK,KAAK,CAAC,GACrC,EAEiB,QAAQ,aAAc,CAACD,EAAOE,IAC1CA,EAAc,SAAS,GAAG,EAAUF,EAIjC,GAHgBE,EAAc,SAASJ,CAAS,EACnDI,EACA,IAAIJ,CAAS,IAAII,EAAc,KAAK,CAAC,EACjB,GACzB,CACH,EAhBmB,cAkBNC,EAAYP,EAAA,CAACG,EAAaD,IAA8B,CACnE,IAAMM,EAAkB,kCACpBC,EAAeN,EAEbO,EAA2B,CAAC,EAC9BC,EAGJ,IADAA,EAAaH,EAAgB,KAAKL,CAAG,EAC9BQ,IAAe,MAAM,CAC1B,GAAIA,EAAY,CACd,IAAMC,EAAoBb,EAAWY,EAAW,CAAC,EAAE,KAAK,EAAGT,CAAS,EACpEQ,EAAe,KAAK,GAAGC,EAAW,CAAC,CAAC;AAAA,IAAOC,CAAiB;AAAA,EAAK,EACjEH,EAAeA,EAAa,QAAQE,EAAW,CAAC,EAAG,EAAE,CACvD,CACAA,EAAaH,EAAgB,KAAKL,CAAG,CACvC,CAEA,OAAAM,EAAeV,EAAWU,EAAa,KAAK,EAAGP,CAAS,EAEjD,GAAGO,CAAY;AAAA,EAAKC,EAAe,KAAK;AAAA,CAAI,CAAC,GAAG,KAAK,CAC9D,EApByB,aCtBzB,IAAMG,EAAgC,IAAI,IAE7BC,EAAmBC,EAAA,CAC9BC,KACGC,IACQ,CACX,IAAMC,EAASF,EAAQ,OACrB,CAACG,EAAaC,EAAKC,IACjB,GAAGF,CAAW,GAAGC,CAAG,GAAGH,EAAeI,CAAK,IAAM,OAAYJ,EAAeI,CAAK,EAAI,EAAE,GACzF,EACF,EAEMC,EAAkBT,EAAS,IAAIK,CAAM,EAC3C,GAAII,IAAoB,OACtB,OAAOA,EAGT,IAAMC,EAAgBC,EAAWN,CAAM,EACjCO,EAAcC,EAAUR,EAAQK,CAAa,EAC7CI,EAAeC,EAAmB,aAAaL,CAAa,EAAE,EAEpE,OAAKI,EAAa,UAAU,SAASF,CAAW,IAC9CE,EAAa,WAAaF,GAG5BZ,EAAS,IAAIK,EAAQK,CAAa,EAE3BA,CACT,EA1BgC",
  "names": ["createHash", "__name", "str", "hash", "i", "styleElementCache", "createStyleElement", "__name", "componentId", "styleElement", "style", "processCSS", "__name", "inputCss", "className", "css", "match", "decl", "selectorBlock", "transpile", "mediaQueryRegex", "processedCSS", "matchedQueries", "matchArray", "mediaQueryContent", "cssCache", "css", "__name", "strings", "interpolations", "rawCSS", "accumulator", "str", "index", "cachedClassName", "classNameHash", "createHash", "scopedStyle", "transpile", "styleElement", "createStyleElement"]
}
