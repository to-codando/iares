{
  "version": 3,
  "sources": ["../../../src/style/cssParser.ts"],
  "sourcesContent": ["type WrapStyleParams = {\n  style: string;\n  selector: string;\n};\n\ntype Accumulator = {\n  insideBlock: number;\n  globalRules: string;\n  result: string;\n};\n\ntype LineProcessing = {\n  globalRules: string;\n  result: string;\n};\n\nconst wrapLooseRulesOutsideMediaQuery = ({\n  style,\n  selector,\n}: WrapStyleParams): string => {\n  const lines = style.split(\"\\n\");\n  const ruleRegex = /^\\s*([\\w-]+)\\s*:\\s*[^;]+;/;\n\n  const initialState: Accumulator = {\n    insideBlock: 0,\n    globalRules: \"\",\n    result: \"\",\n  };\n\n  const processGlobalRules = (\n    globalRules: string,\n    result: string,\n    selector: string,\n  ): LineProcessing => ({\n    globalRules: \"\",\n    result: `${result}${selector} {\\n${globalRules}}\\n\\n`,\n  });\n\n  const processRegularLine = (\n    line: string,\n    result: string,\n  ): LineProcessing => ({\n    globalRules: \"\",\n    result: `${result}${line}\\n`,\n  });\n\n  const addGlobalRule = (\n    line: string,\n    globalRules: string,\n  ): LineProcessing => ({\n    globalRules: `${globalRules}${line}\\n`,\n    result: \"\",\n  });\n\n  const countBlocks = (line: string): number => {\n    const openings = (line.match(/{/g) || []).length;\n    const closings = (line.match(/}/g) || []).length;\n    return openings - closings;\n  };\n\n  const processLine = (acc: Accumulator, line: string): Accumulator => {\n    acc.insideBlock += countBlocks(line);\n\n    // Case 1: Line is a global rule\n    if (acc.insideBlock === 0 && ruleRegex.test(line)) {\n      const { globalRules, result } = addGlobalRule(line, acc.globalRules);\n      return { ...acc, globalRules, result: acc.result + result };\n    }\n\n    // Case 2: There are accumulated global rules\n    if (acc.globalRules) {\n      const { globalRules, result } = processGlobalRules(\n        acc.globalRules,\n        acc.result,\n        selector,\n      );\n      const processedLine = processRegularLine(line, \"\");\n      return {\n        ...acc,\n        globalRules,\n        result: result + processedLine.result,\n      };\n    }\n\n    // Case 3: Regular line\n    const { globalRules, result } = processRegularLine(line, acc.result);\n    return { ...acc, globalRules, result };\n  };\n\n  const { result, globalRules } = lines.reduce(processLine, initialState);\n\n  return globalRules\n    ? `${result}${selector} {\\n${globalRules}}\\n`.trim()\n    : result.trim();\n};\n\nconst wrapLooseRulesInsideMediaQuery = ({\n  style,\n  selector,\n}: WrapStyleParams): string => {\n  const regex = /@media\\s*([^{]+)\\s*\\{([\\s\\S]*?)\\}/g;\n  const ruleRegex = /^\\s*([\\w-]+)\\s*:\\s*[^;]+;/;\n\n  return style.replace(regex, (match, mediaQuery, innerCss) => {\n    const rules = innerCss\n      .trim()\n      .split(\"\\n\")\n      .map((line: string) => line.trim())\n      .filter((line: string) => line);\n\n    const wrappedRules = rules\n      .filter((rule: string) => ruleRegex.test(rule))\n      .map((rule: string) => `${selector} {\\n${rule.trim()}\\n}`)\n      .join(\"\\n\");\n\n    return `@media ${mediaQuery.trim()} {\\n${wrappedRules}\\n}`;\n  });\n};\n\nconst applyClassNameScope = ({ style, selector }: WrapStyleParams): string => {\n  const regex = /\\.(?<![\\d])(?![\\d])([\\w-]+)/g;\n  return style.replace(regex, `.${selector}_$1`);\n};\n\nexport const transformStyle = (rawStyle: string, selector: string): string => {\n  let style = rawStyle;\n  const className = `.${selector}`;\n  style = applyClassNameScope({ style, selector });\n  style = wrapLooseRulesOutsideMediaQuery({ style, selector: className });\n  style = wrapLooseRulesInsideMediaQuery({ style, selector: className });\n\n  return style;\n};\n"],
  "mappings": "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",
  "names": ["globalRules", "result", "selector"]
}
