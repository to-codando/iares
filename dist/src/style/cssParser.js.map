{
  "version": 3,
  "sources": ["../../../src/style/cssParser.ts"],
  "sourcesContent": ["export const createScopeStyle = (str: string): string => {\n  const hashResult = [...str].reduce(\n    (hash, char) => (hash * 33) ^ char.charCodeAt(0),\n    5381,\n  );\n  return `css-${(hashResult >>> 0).toString(36)}`;\n};\n\n// Fun\u00E7\u00E3o que processa CSS aplicando escopo\nconst processCSS = (css: string, className: string): string => {\n  const substituteScope = (inputCss: string): string =>\n    inputCss.replace(/&/g, `.${className}`);\n\n  const wrapLooseRules = (scopedCss: string): string =>\n    scopedCss.replace(\n      /(?:^|\\})([^{]+;)/g,\n      (_, decl) => `.${className} {${decl.trim()}}`,\n    );\n\n  const scopeSelectors = (wrappedCss: string): string =>\n    wrappedCss.replace(/([^{]+\\{)/g, (match, selectorBlock) => {\n      if (selectorBlock.includes(\"@\")) return match; // Manter media queries intactas\n      const scopedSelector = selectorBlock.includes(className)\n        ? selectorBlock\n        : `.${className} ${selectorBlock.trim()}`;\n      return `${scopedSelector} `;\n    });\n\n  return scopeSelectors(wrapLooseRules(substituteScope(css)));\n};\n\nexport const transpile = (css: string, className: string): string => {\n  const mediaQueryRegex = /(@media[^{]+\\{)([\\s\\S]+?})\\s*}/g;\n  const keyframeRegex = /(@keyframes[^{]+\\{(?:[^{}]*\\{[^{}]*\\}\\s*)*?\\})/g;\n\n  const extractKeyframes = (inputCss: string): [string, string[]] => {\n    const keyframes: string[] = [];\n    const newCss = inputCss.replace(keyframeRegex, (match) => {\n      keyframes.push(match);\n      return \"\";\n    });\n    return [newCss, keyframes];\n  };\n\n  const [cssWithoutKeyframes, keyframes] = extractKeyframes(css);\n\n  const processMediaQueries = (inputCss: string): [string, string[]] => {\n    const queries: string[] = [];\n    const remainingCss = inputCss.replace(mediaQueryRegex, (_, p1, p2) => {\n      const scopedContent = processCSS(p2.trim(), className);\n      queries.push(`${p1}\\n  ${scopedContent}\\n}`);\n      return \"\";\n    });\n    return [remainingCss, queries];\n  };\n\n  const [cssWithoutMediaQueries, mediaQueries] =\n    processMediaQueries(cssWithoutKeyframes);\n\n  const processedCss = processCSS(cssWithoutMediaQueries.trim(), className);\n\n  const finalCss = [processedCss, ...mediaQueries, ...keyframes]\n    .filter(Boolean)\n    .join(\"\\n\");\n\n  return finalCss;\n};\n"],
  "mappings": "+EAAO,IAAMA,EAAmBC,EAACC,GAKxB,QAJY,CAAC,GAAGA,CAAG,EAAE,OAC1B,CAACC,EAAMC,IAAUD,EAAO,GAAMC,EAAK,WAAW,CAAC,EAC/C,IACF,IAC8B,GAAG,SAAS,EAAE,CAAC,GALf,oBAS1BC,EAAaJ,EAAA,CAACK,EAAaC,IAURN,EAACO,GACtBA,EAAW,QAAQ,aAAc,CAACC,EAAOC,IACnCA,EAAc,SAAS,GAAG,EAAUD,EAIjC,GAHgBC,EAAc,SAASH,CAAS,EACnDG,EACA,IAAIH,CAAS,IAAIG,EAAc,KAAK,CAAC,EACjB,GACzB,EAPoB,kBANAT,EAACU,GACtBA,EAAU,QACR,oBACA,CAACC,EAAGC,IAAS,IAAIN,CAAS,KAAKM,EAAK,KAAK,CAAC,GAC5C,EAJqB,kBAHCZ,EAACa,GACvBA,EAAS,QAAQ,KAAM,IAAIP,CAAS,EAAE,EADhB,mBAkB6BD,CAAG,CAAC,CAAC,EAnBzC,cAsBNS,EAAYd,EAAA,CAACK,EAAaC,IAA8B,CACnE,IAAMS,EAAkB,kCAClBC,EAAgB,kDAEhBC,EAAmBjB,EAACa,GAAyC,CACjE,IAAMK,EAAsB,CAAC,EAK7B,MAAO,CAJQL,EAAS,QAAQG,EAAgBR,IAC9CU,EAAU,KAAKV,CAAK,EACb,GACR,EACeU,CAAS,CAC3B,EAPyB,oBASnB,CAACC,EAAqBD,CAAS,EAAID,EAAiBZ,CAAG,EAEvDe,EAAsBpB,EAACa,GAAyC,CACpE,IAAMQ,EAAoB,CAAC,EAM3B,MAAO,CALcR,EAAS,QAAQE,EAAiB,CAACJ,EAAGW,EAAIC,IAAO,CACpE,IAAMC,EAAgBpB,EAAWmB,EAAG,KAAK,EAAGjB,CAAS,EACrD,OAAAe,EAAQ,KAAK,GAAGC,CAAE;AAAA,IAAOE,CAAa;AAAA,EAAK,EACpC,EACT,CAAC,EACqBH,CAAO,CAC/B,EAR4B,uBAUtB,CAACI,EAAwBC,CAAY,EACzCN,EAAoBD,CAAmB,EAQzC,MAJiB,CAFIf,EAAWqB,EAAuB,KAAK,EAAGnB,CAAS,EAExC,GAAGoB,EAAc,GAAGR,CAAS,EAC1D,OAAO,OAAO,EACd,KAAK;AAAA,CAAI,CAGd,EAnCyB",
  "names": ["createScopeStyle", "__name", "str", "hash", "char", "processCSS", "css", "className", "wrappedCss", "match", "selectorBlock", "scopedCss", "_", "decl", "inputCss", "transpile", "mediaQueryRegex", "keyframeRegex", "extractKeyframes", "keyframes", "cssWithoutKeyframes", "processMediaQueries", "queries", "p1", "p2", "scopedContent", "cssWithoutMediaQueries", "mediaQueries"]
}
