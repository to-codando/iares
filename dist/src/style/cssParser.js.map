{
  "version": 3,
  "sources": ["../../../src/style/cssParser.ts"],
  "sourcesContent": ["export const createScopeStyle = (str: string): string => {\n  let hash = 5381;\n  for (let i = 0; i < str.length; i++) {\n    hash = (hash * 33) ^ str.charCodeAt(i);\n  }\n  return `css-${(hash >>> 0).toString(36)}`;\n};\n\n// Fun\u00E7\u00E3o que processa CSS aplicando escopo\nconst processCSS = (inputCss: string, className: string): string => {\n  let css = inputCss; // C\u00F3pia para evitar reatribui\u00E7\u00E3o direta de par\u00E2metros\n  css = css.replace(/&/g, `.${className}`);\n\n  // Envolve regras soltas dentro de um bloco da classe\n  const wrappedCSS = css.replace(/(?:^|\\})([^{]+;)/g, (match, decl) => {\n    return `.${className} {${decl.trim()}}`;\n  });\n\n  return wrappedCSS.replace(/([^{]+\\{)/g, (match, selectorBlock) => {\n    if (selectorBlock.includes(\"@\")) return match; // Mant\u00E9m media queries intactas\n    const scopedSelector = selectorBlock.includes(className)\n      ? selectorBlock\n      : `.${className} ${selectorBlock.trim()}`;\n    return `${scopedSelector} `;\n  });\n};\n\nexport const transpile = (css: string, className: string): string => {\n  const mediaQueryRegex = /(@media[^{]+\\{)([\\s\\S]+?})\\s*}/gm;\n  const keyframeRegex = /(@keyframes[^{]+\\{(?:[^{}]*\\{[^{}]*\\}\\s*)*?\\})/gm;\n\n  let processedCSS = css;\n\n  const keyframeMatches: string[] = [];\n  let keyframeMatch: RegExpExecArray | null;\n  while ((keyframeMatch = keyframeRegex.exec(css)) !== null) {\n    if (keyframeMatch) {\n      keyframeMatches.push(keyframeMatch[0]);\n      processedCSS = processedCSS.replace(keyframeMatch[0], \"\");\n    }\n  }\n\n  const matchedQueries: string[] = [];\n  let matchArray: RegExpExecArray | null;\n  matchArray = mediaQueryRegex.exec(processedCSS);\n  while (matchArray !== null) {\n    if (matchArray) {\n      const mediaQueryContent = processCSS(matchArray[2].trim(), className);\n      matchedQueries.push(`${matchArray[1]}\\n  ${mediaQueryContent}\\n}`);\n      processedCSS = processedCSS.replace(matchArray[0], \"\");\n    }\n    matchArray = mediaQueryRegex.exec(processedCSS);\n  }\n\n  processedCSS = processCSS(processedCSS.trim(), className);\n\n  // Adiciona keyframes sem escopo\n  const allCSS =\n    `${processedCSS}\\n${matchedQueries.join(\"\\n\")}\\n${keyframeMatches.join(\"\\n\")}`.trim();\n\n  return allCSS;\n};\n"],
  "mappings": "+EAAO,IAAMA,EAAmBC,EAACC,GAAwB,CACvD,IAAIC,EAAO,KACX,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAC9BD,EAAQA,EAAO,GAAMD,EAAI,WAAWE,CAAC,EAEvC,MAAO,QAAQD,IAAS,GAAG,SAAS,EAAE,CAAC,EACzC,EANgC,oBAS1BE,EAAaJ,EAAA,CAACK,EAAkBC,IAA8B,CAClE,IAAIC,EAAMF,EACV,OAAAE,EAAMA,EAAI,QAAQ,KAAM,IAAID,CAAS,EAAE,EAGpBC,EAAI,QAAQ,oBAAqB,CAACC,EAAOC,IACnD,IAAIH,CAAS,KAAKG,EAAK,KAAK,CAAC,GACrC,EAEiB,QAAQ,aAAc,CAACD,EAAOE,IAC1CA,EAAc,SAAS,GAAG,EAAUF,EAIjC,GAHgBE,EAAc,SAASJ,CAAS,EACnDI,EACA,IAAIJ,CAAS,IAAII,EAAc,KAAK,CAAC,EACjB,GACzB,CACH,EAhBmB,cAkBNC,EAAYX,EAAA,CAACO,EAAaD,IAA8B,CACnE,IAAMM,EAAkB,mCAClBC,EAAgB,mDAElBC,EAAeP,EAEbQ,EAA4B,CAAC,EAC/BC,EACJ,MAAQA,EAAgBH,EAAc,KAAKN,CAAG,KAAO,MAC/CS,IACFD,EAAgB,KAAKC,EAAc,CAAC,CAAC,EACrCF,EAAeA,EAAa,QAAQE,EAAc,CAAC,EAAG,EAAE,GAI5D,IAAMC,EAA2B,CAAC,EAC9BC,EAEJ,IADAA,EAAaN,EAAgB,KAAKE,CAAY,EACvCI,IAAe,MAAM,CAC1B,GAAIA,EAAY,CACd,IAAMC,EAAoBf,EAAWc,EAAW,CAAC,EAAE,KAAK,EAAGZ,CAAS,EACpEW,EAAe,KAAK,GAAGC,EAAW,CAAC,CAAC;AAAA,IAAOC,CAAiB;AAAA,EAAK,EACjEL,EAAeA,EAAa,QAAQI,EAAW,CAAC,EAAG,EAAE,CACvD,CACAA,EAAaN,EAAgB,KAAKE,CAAY,CAChD,CAEA,OAAAA,EAAeV,EAAWU,EAAa,KAAK,EAAGR,CAAS,EAItD,GAAGQ,CAAY;AAAA,EAAKG,EAAe,KAAK;AAAA,CAAI,CAAC;AAAA,EAAKF,EAAgB,KAAK;AAAA,CAAI,CAAC,GAAG,KAAK,CAGxF,EAlCyB",
  "names": ["createScopeStyle", "__name", "str", "hash", "i", "processCSS", "inputCss", "className", "css", "match", "decl", "selectorBlock", "transpile", "mediaQueryRegex", "keyframeRegex", "processedCSS", "keyframeMatches", "keyframeMatch", "matchedQueries", "matchArray", "mediaQueryContent"]
}
