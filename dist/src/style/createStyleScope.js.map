{
  "version": 3,
  "sources": ["../../../src/style/createStyleScope.ts"],
  "sourcesContent": ["const splitIntoRules = (css: string): string[] => {\n  return css\n    .split(\"}\")\n    .map((rule) => rule.trim())\n    .filter((rule) => rule.length > 0);\n};\n\nconst parseRule = (rule: string): [string[], string] | null => {\n  const parts = rule.split(\"{\").map((part) => part.trim());\n\n  if (parts.length !== 2) {\n    console.warn(`Regra CSS inv\u00E1lida omitida: \"${rule}\"`);\n    return null; // Retorna null para indicar uma regra inv\u00E1lida\n  }\n\n  const [selectorPart, declarationPart] = parts;\n\n  if (!selectorPart || !declarationPart) {\n    console.warn(`Regra CSS incompleta omitida: \"${rule}\"`);\n    return null;\n  }\n\n  const selectors = selectorPart.split(\",\").map((selector) => selector.trim());\n  const declarations = declarationPart.trim();\n\n  return [selectors, declarations];\n};\n\nconst prefixSelector = (selector: string, className: string): string => {\n  if (selector.startsWith(\"&\")) {\n    return selector.replace(\"&\", `.${className}`);\n  }\n  return `.${className}${selector}`;\n};\n\nconst scopeRule = (rule: string, className: string): string => {\n  const parsedRule = parseRule(rule);\n  if (!parsedRule) {\n    return \"\";\n  }\n\n  const [selectors, declarations] = parsedRule;\n  const scopedSelectors = selectors.map((selector) =>\n    // Substituir diretamente o seletor original pelo da classe \u00FAnica\n    selector.startsWith(\".\")\n      ? `.${className}`\n      : prefixSelector(selector, className),\n  );\n\n  return `${scopedSelectors.join(\", \")} { ${declarations} }\\n`;\n};\n\nexport const createStyleScope = (className: string, css: string): string => {\n  return splitIntoRules(css)\n    .map((rule) => scopeRule(rule, className))\n    .filter((scopedRule) => scopedRule.length > 0)\n    .join(\"\"); // Certifique-se de que cada regra final est\u00E1 corretamente formatada\n};\n"],
  "mappings": "+EAAA,IAAMA,EAAiBC,EAACC,GACfA,EACJ,MAAM,GAAG,EACT,IAAKC,GAASA,EAAK,KAAK,CAAC,EACzB,OAAQA,GAASA,EAAK,OAAS,CAAC,EAJd,kBAOjBC,EAAYH,EAACE,GAA4C,CAC7D,IAAME,EAAQF,EAAK,MAAM,GAAG,EAAE,IAAKG,GAASA,EAAK,KAAK,CAAC,EAEvD,GAAID,EAAM,SAAW,EACnB,eAAQ,KAAK,mCAAgCF,CAAI,GAAG,EAC7C,KAGT,GAAM,CAACI,EAAcC,CAAe,EAAIH,EAExC,GAAI,CAACE,GAAgB,CAACC,EACpB,eAAQ,KAAK,kCAAkCL,CAAI,GAAG,EAC/C,KAGT,IAAMM,EAAYF,EAAa,MAAM,GAAG,EAAE,IAAKG,GAAaA,EAAS,KAAK,CAAC,EACrEC,EAAeH,EAAgB,KAAK,EAE1C,MAAO,CAACC,EAAWE,CAAY,CACjC,EAnBkB,aAqBZC,EAAiBX,EAAA,CAACS,EAAkBG,IACpCH,EAAS,WAAW,GAAG,EAClBA,EAAS,QAAQ,IAAK,IAAIG,CAAS,EAAE,EAEvC,IAAIA,CAAS,GAAGH,CAAQ,GAJV,kBAOjBI,EAAYb,EAAA,CAACE,EAAcU,IAA8B,CAC7D,IAAME,EAAaX,EAAUD,CAAI,EACjC,GAAI,CAACY,EACH,MAAO,GAGT,GAAM,CAACN,EAAWE,CAAY,EAAII,EAQlC,MAAO,GAPiBN,EAAU,IAAKC,GAErCA,EAAS,WAAW,GAAG,EACnB,IAAIG,CAAS,GACbD,EAAeF,EAAUG,CAAS,CACxC,EAE0B,KAAK,IAAI,CAAC,MAAMF,CAAY;AAAA,CACxD,EAfkB,aAiBLK,EAAmBf,EAAA,CAACY,EAAmBX,IAC3CF,EAAeE,CAAG,EACtB,IAAKC,GAASW,EAAUX,EAAMU,CAAS,CAAC,EACxC,OAAQI,GAAeA,EAAW,OAAS,CAAC,EAC5C,KAAK,EAAE,EAJoB",
  "names": ["splitIntoRules", "__name", "css", "rule", "parseRule", "parts", "part", "selectorPart", "declarationPart", "selectors", "selector", "declarations", "prefixSelector", "className", "scopeRule", "parsedRule", "createStyleScope", "scopedRule"]
}
