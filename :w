import { render } from "@/render";
import type { Template, TemplateSchema } from "@/template";
import {
  type State,
  type StateCreator,
  type StateManager,
  createState,
} from "@/state";

type Factory = (params?: unknown) => unknown;
type Handler = (element: Element) => void;
type SetupStateManger = <T>(stateManager: StateManager<T>) => void;
type StateWatcher = () => void;

type LocalStateManager = {
  stateManager: StateManager;
  createState: StateCreator;
  watchState: (state: StateManager, stateHandler: StateWatcher) => void;
};

const _createTagByFactoryName = (factory: Factory) => {
  return factory.name
    .split(/(?=[A-Z])/)
    .join("-")
    .toLowerCase();
};

const setupState = (state: State): LocalStateManager => {
  let stateManager = null;

  const stateCreator = <T>(payload: State<T>): StateManager<T> => {
    stateManager = createState<T>(payload);
    Object.assign(state, stateManager.get());
    return stateManager;
  };

  const watchState = (state: StateManager, stateWatcher: StateWatcher) => {};

  return { createState: stateCreator, watchState, stateManager };
};

export const createElementByFactoryName =
  ({ type, props }: TemplateSchema, handler: Handler) =>
  () => {
    const state = {};

    const factory = type as Factory;
    const tagName = _createTagByFactoryName(factory);
    const element = document.createElement(tagName);

    const { createState, watchState } = setupState(state);

    const template = factory({
      props,
      createState,
    });

    watchState();

    render(template as Template, element);
    handler(element);
  };
